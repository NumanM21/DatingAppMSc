// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230911074033_MessageUserEntityUpdated")]
    partial class MessageUserEntityUpdated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Introduction")
                        .HasColumnType("TEXT");

                    b.Property<string>("KnownAs")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<string>("LookingFor")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<DateTime>("UserCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserGender")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserInterests")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Entities.LikeUser", b =>
                {
                    b.Property<int>("SourceUserID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserLikedBySourceID")
                        .HasColumnType("INTEGER");

                    b.HasKey("SourceUserID", "UserLikedBySourceID");

                    b.HasIndex("UserLikedBySourceID");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("API.Entities.MessageUser", b =>
                {
                    b.Property<int>("messageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReceivingUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SenderUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("messageContent")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("messageReadAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("messageReceivingDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("messageReceivingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("messageReceivingUsername")
                        .HasColumnType("TEXT");

                    b.Property<int>("messageSenderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("messageSenderUsername")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("messageSentAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("messageSentDeleted")
                        .HasColumnType("INTEGER");

                    b.HasKey("messageId");

                    b.HasIndex("ReceivingUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("API.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppUserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMainPhoto")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("API.Entities.LikeUser", b =>
                {
                    b.HasOne("API.Entities.AppUser", "SourceUser")
                        .WithMany("UsersLiked")
                        .HasForeignKey("SourceUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "UserLikedBySource")
                        .WithMany("UserLikedBy")
                        .HasForeignKey("UserLikedBySourceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceUser");

                    b.Navigation("UserLikedBySource");
                });

            modelBuilder.Entity("API.Entities.MessageUser", b =>
                {
                    b.HasOne("API.Entities.AppUser", "ReceivingUser")
                        .WithMany("MessageReceived")
                        .HasForeignKey("ReceivingUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("API.Entities.AppUser", "SenderUser")
                        .WithMany("MessageSent")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ReceivingUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("API.Entities.Photo", b =>
                {
                    b.HasOne("API.Entities.AppUser", "AppUser")
                        .WithMany("Photos")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("MessageReceived");

                    b.Navigation("MessageSent");

                    b.Navigation("Photos");

                    b.Navigation("UserLikedBy");

                    b.Navigation("UsersLiked");
                });
#pragma warning restore 612, 618
        }
    }
}
